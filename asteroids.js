// Generated by CoffeeScript 1.7.1
(function() {
  var Asteroid, Bullet, Drawable, FireBall, FireFlower, HealthBar, ImageLoader, Mushroom, PowerUp, Ship, Star, StarPowerUp, Vec2, asteroids, bindControls, bullets, canvas, canvasHeight, canvasWidth, draw, drawBackground, fpsToInterval, frameRate, gameInit, healthBar, images, numFireFlowersPickedUp, onLoad, powerUpCounter, powerUps, score, ship, spawnPowerup, stars, thrust, updateCoefficient, xformCanvas,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  canvas = null;

  canvasWidth = 0;

  canvasHeight = 0;

  frameRate = 20;

  thrust = 5;

  updateCoefficient = 1;

  images = null;

  ship = null;

  bullets = [];

  asteroids = [];

  stars = [];

  healthBar = null;

  powerUps = [];

  score = 0;

  numFireFlowersPickedUp = 0;

  onLoad = function() {
    var imgBaseUrl;
    imgBaseUrl = "";
    images = new ImageLoader([
      {
        name: "asteroid",
        url: imgBaseUrl + "img/asteroid-img.png"
      }, {
        name: "ship-thrust",
        url: imgBaseUrl + "img/spaceship-thrust.gif"
      }, {
        name: "ship",
        url: imgBaseUrl + "img/spaceship-no-thrust.gif"
      }, {
        name: "mushroom",
        url: imgBaseUrl + "img/mushroom.png"
      }, {
        name: "fireflower",
        url: imgBaseUrl + "img/fireflower.gif"
      }, {
        name: "fireball",
        url: imgBaseUrl + "img/fireball.png"
      }, {
        name: "star",
        url: imgBaseUrl + "img/star.png"
      }, {
        name: "invin1",
        url: imgBaseUrl + "img/invincible-ship/ship1.gif"
      }, {
        name: "invin2",
        url: imgBaseUrl + "img/invincible-ship/ship2.gif"
      }, {
        name: "invin3",
        url: imgBaseUrl + "img/invincible-ship/ship3.gif"
      }, {
        name: "invin4",
        url: imgBaseUrl + "img/invincible-ship/ship4.gif"
      }, {
        name: "invin5",
        url: imgBaseUrl + "img/invincible-ship/ship5.gif"
      }
    ]);
    images.onLoad(gameInit);
    canvas = $("#gameCanvas")[0].getContext("2d");
    canvasWidth = $("#gameCanvas").width();
    return canvasHeight = $("#gameCanvas").height();
  };

  gameInit = function() {
    var i, _i;
    healthBar = new HealthBar(10);
    ship = new Ship();
    asteroids.push(new Asteroid());
    setInterval((function() {
      return asteroids.push(new Asteroid());
    }), 5000);
    powerUps.push(new Mushroom());
    powerUps.push(new FireFlower());
    powerUps.push(new StarPowerUp());
    setInterval(spawnPowerup, 30000);
    for (i = _i = 0; _i < 30; i = ++_i) {
      stars.push(new Star());
    }
    setInterval(draw, fpsToInterval(frameRate));
    bindControls(ship);
    $("#gameCanvas").click(function(evt) {
      var clickPos, diff;
      clickPos = new Vec2(evt.offsetX, evt.offsetY);
      diff = clickPos.sub(ship.position);
      ship.heading = Math.atan2(-diff.y, diff.x);
      return ship.shoot();
    });
    $("#flower-btn").click(function() {
      return new FireFlower().onPickup();
    });
    $("#mushroom-btn").click(function() {
      return new Mushroom().onPickup();
    });
    return $("#star-btn").click(function() {
      return new StarPowerUp().onPickup();
    });
  };

  draw = function() {
    var a, b, p, _i, _j, _k, _len, _len1, _len2;
    drawBackground();
    ship.draw();
    bullets = bullets.filter(function(b) {
      return b.exists();
    });
    for (_i = 0, _len = bullets.length; _i < _len; _i++) {
      b = bullets[_i];
      b.draw();
    }
    asteroids = asteroids.filter(function(a) {
      return a.exists();
    });
    $("#asteroidCount").text(asteroids.length);
    for (_j = 0, _len1 = asteroids.length; _j < _len1; _j++) {
      a = asteroids[_j];
      a.draw();
    }
    powerUps = powerUps.filter(function(p) {
      return p.exists();
    });
    for (_k = 0, _len2 = powerUps.length; _k < _len2; _k++) {
      p = powerUps[_k];
      p.draw();
    }
    return healthBar.draw();
  };

  drawBackground = function() {
    var s, _i, _len, _results;
    xformCanvas((function(_this) {
      return function(c) {
        c.fillStyle = "#000000";
        return c.fillRect(0, 0, canvasWidth, canvasHeight);
      };
    })(this));
    _results = [];
    for (_i = 0, _len = stars.length; _i < _len; _i++) {
      s = stars[_i];
      _results.push(s.draw());
    }
    return _results;
  };

  xformCanvas = function(fn) {
    canvas.save();
    try {
      return fn(canvas);
    } finally {
      canvas.restore();
    }
  };

  fpsToInterval = function(fps) {
    return 1000 / fps;
  };

  bindControls = function(ship) {
    var keyIntervalIds;
    keyIntervalIds = {};
    window.onkeydown = function(evt) {
      var action;
      if (keyIntervalIds[evt.keyCode] != null) {
        return;
      }
      action = (function() {
        switch (evt.keyCode) {
          case 37:
          case 90:
            return ship.rotateLeft;
          case 39:
          case 88:
            return ship.rotateRight;
          case 38:
          case 188:
            ship.thrustVisibility(true);
            return ship.applyThrust;
        }
      })();
      return keyIntervalIds[evt.keyCode] = setInterval(action, 50);
    };
    window.onkeyup = function(evt) {
      var keyCode;
      keyCode = evt.keyCode;
      clearInterval(keyIntervalIds[keyCode]);
      keyIntervalIds[keyCode] = null;
      if (keyCode === 38 || keyCode === 188) {
        return ship.thrustVisibility(false);
      }
    };
    return window.onkeypress = function(evt) {
      if (evt.keyCode === 32 || evt.keyCode === 46) {
        evt.preventDefault();
        return ship.shoot();
      }
    };
  };

  powerUpCounter = 0;

  spawnPowerup = function() {
    var powerUp;
    powerUp = (function() {
      switch (powerUpCounter) {
        case 0:
          return new Mushroom();
        case 1:
          return new FireFlower();
        case 2:
          return new StarPowerUp();
      }
    })();
    powerUps.push(powerUp);
    return powerUpCounter = (powerUpCounter + 1) % 3;
  };

  Drawable = (function() {
    function Drawable(x, y) {
      this.closeEnough = __bind(this.closeEnough, this);
      this.applyForce = __bind(this.applyForce, this);
      this.update = __bind(this.update, this);
      this.drawImage = __bind(this.drawImage, this);
      this.draw = __bind(this.draw, this);
      if (x == null) {
        x = Math.randInt(canvasWidth);
      }
      if (y == null) {
        y = Math.randInt(canvasHeight);
      }
      this.position = new Vec2(x, y);
      this.force = new Vec2(0, 0);
      this.heading = Math.PI / 2;
      this.rotation = this.heading;
      this.headingMatchesRotation = true;
      this.drag = 1;
    }

    Drawable.prototype.draw = function() {
      this.update(fpsToInterval(frameRate));
      return xformCanvas((function(_this) {
        return function(c) {
          var rot;
          c.translate(_this.position.x, _this.position.y);
          rot = _this.headingMatchesRotation ? _this.heading : _this.rotation;
          c.rotate(-rot + Math.PI / 2);
          return _this.render(c);
        };
      })(this));
    };

    Drawable.prototype.drawImage = function(c, image) {
      return c.drawImage(image, -this.size.x / 2, -this.size.y / 2, this.size.x, this.size.y);
    };

    Drawable.prototype.update = function(dt) {
      var distance, newPos;
      this.force = this.force.scale(this.drag);
      newPos = this.force.scale(dt * updateCoefficient).add(this.position);
      distance = this.position.dist(newPos);
      this.position = newPos.wrap();
      return distance;
    };

    Drawable.prototype.applyForce = function(magnitude) {
      return this.force = this.force.addPolar(magnitude, this.heading);
    };

    Drawable.prototype.closeEnough = function(other, dist) {
      if (dist == null) {
        dist = 25;
      }
      return this.position.withinDist(other.position, dist);
    };

    return Drawable;

  })();

  Ship = (function(_super) {
    var rotateSize;

    __extends(Ship, _super);

    function Ship() {
      this.setInvin = __bind(this.setInvin, this);
      this.thrustVisibility = __bind(this.thrustVisibility, this);
      this.checkPowerUpPickup = __bind(this.checkPowerUpPickup, this);
      this.checkInvinAsteroidCollision = __bind(this.checkInvinAsteroidCollision, this);
      this.checkAnyAsteroidCollision = __bind(this.checkAnyAsteroidCollision, this);
      this.update = __bind(this.update, this);
      this.randomMove = __bind(this.randomMove, this);
      this.shoot = __bind(this.shoot, this);
      this.rotateRight = __bind(this.rotateRight, this);
      this.rotateLeft = __bind(this.rotateLeft, this);
      this.applyThrust = __bind(this.applyThrust, this);
      this.image = images.get("ship");
      this.size = new Vec2(this.image.width, this.image.height).scale(.5);
      this.thrustImg = images.get("ship-thrust");
      this.invinImgs = [images.get("invin1"), images.get("invin2"), images.get("invin3"), images.get("invin4"), images.get("invin5")];
      this.invinCount = 0;
      this.isInvin = false;
      this.invinAlmostOver = false;
      Ship.__super__.constructor.call(this, canvasWidth / 2, canvasHeight / 2);
      this.drag = .99;
      this.recovering = false;
      this.thrustVisible = false;
    }

    Ship.prototype.render = function(c) {
      var img;
      if (this.recovering || this.invinAlmostOver) {
        c.globalAlpha = .4;
      }
      if (this.isInvin && !this.invinAlmostOver) {
        img = this.invinImgs[this.invinCount];
        this.invinCount = (this.invinCount + 1) % 5;
      } else {
        img = this.thrustVisible ? this.thrustImg : this.image;
      }
      return this.drawImage(c, img);
    };

    Ship.prototype.applyThrust = function() {
      if (!this.recovering) {
        return this.applyForce(thrust / 1000);
      }
    };

    rotateSize = .3;

    Ship.prototype.rotateLeft = function() {
      if (!this.recovering) {
        return this.heading += rotateSize;
      }
    };

    Ship.prototype.rotateRight = function() {
      if (!this.recovering) {
        return this.heading -= rotateSize;
      }
    };

    Ship.prototype.shoot = function() {
      if (this.recovering) {
        return;
      }
      if (numFireFlowersPickedUp > 0) {
        bullets.push(new FireBall(this));
        return numFireFlowersPickedUp -= 1;
      } else {
        return bullets.push(new Bullet(this));
      }
    };

    Ship.prototype.randomMove = function() {
      var moves;
      moves = [this.applyThrust, this.rotateLeft, this.rotateRight, this.shoot];
      return moves[Math.randInt(moves.length)]();
    };

    Ship.prototype.update = function() {
      Ship.__super__.update.apply(this, arguments);
      if (this.recovering) {
        return;
      }
      if (this.isInvin) {
        this.checkInvinAsteroidCollision();
      } else {
        this.checkAnyAsteroidCollision();
      }
      return this.checkPowerUpPickup();
    };

    Ship.prototype.checkAnyAsteroidCollision = function() {
      if (asteroids.some((function(_this) {
        return function(a) {
          return _this.closeEnough(a, a.size.x);
        };
      })(this))) {
        healthBar.decrement();
        this.recovering = true;
        this.thrustVisibility(false);
        return setTimeout(((function(_this) {
          return function() {
            return _this.recovering = false;
          };
        })(this)), 2000);
      }
    };

    Ship.prototype.checkInvinAsteroidCollision = function() {
      var a, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = asteroids.length; _i < _len; _i++) {
        a = asteroids[_i];
        if (this.closeEnough(a, a.size.x)) {
          _results.push(a.onHit(this));
        }
      }
      return _results;
    };

    Ship.prototype.checkPowerUpPickup = function() {
      var p, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = powerUps.length; _i < _len; _i++) {
        p = powerUps[_i];
        if (!(this.closeEnough(p, this.height))) {
          continue;
        }
        healthBar.increment();
        p.pickedUp = true;
        _results.push(p.onPickup());
      }
      return _results;
    };

    Ship.prototype.thrustVisibility = function(val) {
      return this.thrustVisible = val && !this.recovering;
    };

    Ship.prototype.setInvin = function(val) {
      this.isInvin = val;
      this.recovering = false;
      return this.invinAlmostOver = false;
    };

    return Ship;

  })(Drawable);

  HealthBar = (function() {
    var height;

    height = 15;

    function HealthBar(maxHealth) {
      this.maxHealth = maxHealth;
      this.draw = __bind(this.draw, this);
      this.increment = __bind(this.increment, this);
      this.decrement = __bind(this.decrement, this);
      this.setHealthLeft = __bind(this.setHealthLeft, this);
      this.position = new Vec2(0, canvasHeight - height);
      this.setHealthLeft(this.maxHealth);
    }

    HealthBar.prototype.setHealthLeft = function(health) {
      this.health = health;
      return this.width = canvasWidth * health / this.maxHealth;
    };

    HealthBar.prototype.decrement = function() {
      return this.setHealthLeft(this.health - 1);
    };

    HealthBar.prototype.increment = function() {
      if (!(this.health < this.maxHealth)) {
        return;
      }
      return this.setHealthLeft(this.health + 1);
    };

    HealthBar.prototype.draw = function() {
      return xformCanvas((function(_this) {
        return function(c) {
          c.fillStyle = "#00FF00";
          return c.fillRect(_this.position.x, _this.position.y, _this.width, height);
        };
      })(this));
    };

    return HealthBar;

  })();

  Asteroid = (function(_super) {
    var scoreTable;

    __extends(Asteroid, _super);

    scoreTable = {
      3: 20,
      2: 50,
      1: 100
    };

    function Asteroid(type, parent, hitter, first) {
      this.type = type != null ? type : 3;
      if (parent == null) {
        parent = null;
      }
      if (hitter == null) {
        hitter = null;
      }
      if (first == null) {
        first = false;
      }
      this.onHit = __bind(this.onHit, this);
      this.update = __bind(this.update, this);
      this.exists = __bind(this.exists, this);
      this.render = __bind(this.render, this);
      this.image = images.get("asteroid");
      this.size = new Vec2(this.image.width, this.image.height).scale(this.type / 6);
      this.force = new Vec2(0, 0);
      if (parent != null) {
        Asteroid.__super__.constructor.call(this, parent.position.x, parent.position.y);
        this.heading = hitter.heading + (first ? .2 : -0.2);
      } else {
        Asteroid.__super__.constructor.call(this, Math.randInt(canvasWidth), Math.randInt(canvasHeight));
        this.heading = Math.random() * Math.PI * 2;
      }
      this.applyForce(.1);
      this.gotHit = false;
    }

    Asteroid.prototype.render = function(c) {
      return this.drawImage(c, this.image);
    };

    Asteroid.prototype.exists = function() {
      return !this.gotHit;
    };

    Asteroid.prototype.update = function() {
      var b, hitter, _i, _len;
      Asteroid.__super__.update.apply(this, arguments);
      hitter = null;
      for (_i = 0, _len = bullets.length; _i < _len; _i++) {
        b = bullets[_i];
        if (!(this.closeEnough(b, this.size.x - 10))) {
          continue;
        }
        b.onHit();
        hitter = b;
        this.gotHit = true;
      }
      if (this.gotHit) {
        return this.onHit(hitter);
      }
    };

    Asteroid.prototype.onHit = function(hitter) {
      this.gotHit = true;
      score += scoreTable[this.type];
      $("#scoreDisplay").text(score);
      if (this.type > 1) {
        asteroids.push(new Asteroid(this.type - 1, this, hitter, false));
        return asteroids.push(new Asteroid(this.type - 1, this, hitter, true));
      }
    };

    return Asteroid;

  })(Drawable);

  Bullet = (function(_super) {
    __extends(Bullet, _super);

    function Bullet(ship) {
      this.onHit = __bind(this.onHit, this);
      this.exists = __bind(this.exists, this);
      this.update = __bind(this.update, this);
      this.render = __bind(this.render, this);
      Bullet.__super__.constructor.call(this, ship.position.x, ship.position.y);
      this.force = ship.force.copy();
      this.heading = ship.heading;
      this.distanceRemaining = 3000;
      this.size = new Vec2(10, 25);
      this.applyForce(thrust / 20);
    }

    Bullet.prototype.render = function(c) {
      c.fillStyle = "#FF0000";
      return c.fillRect(-this.size.x / 2, -this.size.y / 2, this.size.x, this.size.y);
    };

    Bullet.prototype.update = function() {
      return this.distanceRemaining -= Bullet.__super__.update.apply(this, arguments);
    };

    Bullet.prototype.exists = function() {
      return this.distanceRemaining > 0;
    };

    Bullet.prototype.onHit = function() {
      return this.distanceRemaining = -1;
    };

    return Bullet;

  })(Drawable);

  FireBall = (function(_super) {
    var sizes;

    __extends(FireBall, _super);

    sizes = {
      3: 32,
      2: 25,
      1: 20
    };

    function FireBall(parent, type, nthChild) {
      this.type = type != null ? type : 3;
      if (nthChild == null) {
        nthChild = 0;
      }
      this.onHit = __bind(this.onHit, this);
      this.exists = __bind(this.exists, this);
      this.update = __bind(this.update, this);
      this.render = __bind(this.render, this);
      FireBall.__super__.constructor.call(this, parent.position.x, parent.position.y);
      this.image = images.get("fireball");
      if (this.type === 3) {
        this.heading = parent.heading;
        this.force = parent.force.copy();
        this.applyForce(thrust / 20);
      } else {
        if (this.type === 1) {
          this.heading += Math.PI / 4;
        }
        this.heading += Math.PI / 2 * nthChild;
        this.applyForce(.1);
      }
      this.hit = false;
      this.distanceRemaining = 10000;
      this.size = new Vec2(this.image.width, this.image.height).scaleToWidth(sizes[this.type]);
      this.createTimeMs = new Date().getTime();
    }

    FireBall.prototype.render = function(c) {
      return this.drawImage(c, this.image);
    };

    FireBall.prototype.update = function() {
      return this.distanceRemaining -= FireBall.__super__.update.apply(this, arguments);
    };

    FireBall.prototype.exists = function() {
      if (this.hit) {
        return false;
      }
      if (this.type === 3) {
        return true;
      }
      return this.distanceRemaining > 0;
    };

    FireBall.prototype.onHit = function() {
      var i, _i, _results;
      if ((new Date().getTime() - this.createTimeMs) < 500) {
        return;
      }
      this.hit = true;
      if (this.type === 1) {
        return;
      }
      _results = [];
      for (i = _i = 0; _i < 4; i = ++_i) {
        _results.push(bullets.push(new FireBall(this, this.type - 1, i)));
      }
      return _results;
    };

    return FireBall;

  })(Drawable);

  PowerUp = (function(_super) {
    __extends(PowerUp, _super);

    function PowerUp(imgName) {
      this.exists = __bind(this.exists, this);
      this.render = __bind(this.render, this);
      this.image = images.get(imgName);
      this.size = new Vec2(this.image.width, this.image.height);
      PowerUp.__super__.constructor.call(this, null, null);
      this.headingMatchesRotation = false;
      this.heading = Math.random() * 2 * Math.PI;
      this.applyForce(.05);
      this.pickedUp = false;
      this.createTimeMs = new Date().getTime();
    }

    PowerUp.prototype.render = function(c) {
      return this.drawImage(c, this.image);
    };

    PowerUp.prototype.lifetimeExceeded = function() {
      return (new Date().getTime() - this.createTimeMs) > 10000;
    };

    PowerUp.prototype.exists = function() {
      return !this.pickedUp && !this.lifetimeExceeded();
    };

    return PowerUp;

  })(Drawable);

  Mushroom = (function(_super) {
    __extends(Mushroom, _super);

    function Mushroom() {
      Mushroom.__super__.constructor.call(this, "mushroom");
      this.size = this.size.scaleToWidth(75);
    }

    Mushroom.prototype.onPickup = function() {
      return healthBar.increment();
    };

    return Mushroom;

  })(PowerUp);

  FireFlower = (function(_super) {
    __extends(FireFlower, _super);

    function FireFlower() {
      FireFlower.__super__.constructor.call(this, "fireflower");
      this.size = this.size.scaleToWidth(120);
    }

    FireFlower.prototype.onPickup = function() {
      return numFireFlowersPickedUp += 1;
    };

    return FireFlower;

  })(PowerUp);

  StarPowerUp = (function(_super) {
    __extends(StarPowerUp, _super);

    function StarPowerUp() {
      StarPowerUp.__super__.constructor.call(this, "star");
      this.size = this.size.scaleToWidth(38);
    }

    StarPowerUp.prototype.onPickup = function() {
      ship.setInvin(true);
      setTimeout((function() {
        return ship.invinAlmostOver = true;
      }), 20000);
      return setTimeout((function() {
        return ship.setInvin(false);
      }), 25000);
    };

    return StarPowerUp;

  })(PowerUp);

  Star = (function(_super) {
    __extends(Star, _super);

    function Star() {
      this.render = __bind(this.render, this);
      return Star.__super__.constructor.apply(this, arguments);
    }

    Star.prototype.render = function(c) {
      c.fillStyle = "#FFFFFF";
      c.fillRect(0, -1, 1, 3);
      return c.fillRect(-1, 1, 3, 1);
    };

    return Star;

  })(Drawable);

  Math.randInt = function(a, b) {
    var range, _ref;
    if (b == null) {
      b = null;
    }
    if (b == null) {
      _ref = [0, a], a = _ref[0], b = _ref[1];
    }
    range = b - a;
    return a + Math.floor(Math.random() * range);
  };

  ImageLoader = (function() {
    function ImageLoader(imageReqs) {
      var image, req, _i, _len, _ref;
      this.imageReqs = imageReqs;
      this.get = __bind(this.get, this);
      this.onLoad = __bind(this.onLoad, this);
      this.imageMap = {};
      this.numLoaded = 0;
      this.totalNumImages = this.imageReqs.length;
      _ref = this.imageReqs;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        req = _ref[_i];
        image = new Image();
        image.onload = (function(_this) {
          return function() {
            return _this.numLoaded += 1;
          };
        })(this);
        image.src = req.url;
        this.imageMap[req.name] = image;
      }
    }

    ImageLoader.prototype.onLoad = function(callBack) {
      if (this.numLoaded < this.totalNumImages) {
        setTimeout(((function(_this) {
          return function() {
            return _this.onLoad(callBack);
          };
        })(this)), 10);
        return;
      }
      return callBack();
    };

    ImageLoader.prototype.get = function(name) {
      return this.imageMap[name];
    };

    return ImageLoader;

  })();

  Vec2 = (function() {
    function Vec2(x, y) {
      this.x = x != null ? x : 0;
      this.y = y != null ? y : 0;
      this.copy = __bind(this.copy, this);
      this.addPolar = __bind(this.addPolar, this);
      this.withinDist = __bind(this.withinDist, this);
      this.wrap = __bind(this.wrap, this);
      this.dist = __bind(this.dist, this);
      this.scaleToWidth = __bind(this.scaleToWidth, this);
      this.scale = __bind(this.scale, this);
      this.dotProd = __bind(this.dotProd, this);
      this.sub = __bind(this.sub, this);
      this.add = __bind(this.add, this);
    }

    Vec2.prototype.add = function(other) {
      return new Vec2(this.x + other.x, this.y + other.y);
    };

    Vec2.prototype.sub = function(other) {
      return this.add(other.scale(-1));
    };

    Vec2.prototype.dotProd = function(other) {
      return new Vec2(this.x * other.x, this.y * other.y);
    };

    Vec2.prototype.scale = function(val) {
      return new Vec2(this.x * val, this.y * val);
    };

    Vec2.prototype.scaleToWidth = function(newWidth) {
      return this.scale(newWidth / this.x);
    };

    Vec2.prototype.dist = function(other) {
      var delta, product;
      delta = this.sub(other);
      product = delta.dotProd(delta);
      return product.x + product.y;
    };

    Vec2.prototype.wrap = function() {
      var x, y;
      x = this.x % canvasWidth;
      y = this.y % canvasHeight;
      if (this.x < 0) {
        x += canvasWidth;
      }
      if (this.y < 0) {
        y += canvasHeight;
      }
      return new Vec2(x, y);
    };

    Vec2.prototype.withinDist = function(other, dist) {
      return this.dist(other) < (dist * dist);
    };

    Vec2.prototype.addPolar = function(r, theta) {
      var x, y;
      x = Math.cos(theta) * r + this.x;
      y = -Math.sin(theta) * r + this.y;
      return new Vec2(x, y);
    };

    Vec2.prototype.copy = function() {
      return new Vec2(this.x, this.y);
    };

    return Vec2;

  })();

  $(function() {
    return onLoad();
  });

}).call(this);

//# sourceMappingURL=asteroids.map
