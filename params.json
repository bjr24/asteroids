{"name":"Asteroids","tagline":"","body":"\r\n<script src=\"http://code.jquery.com/jquery-1.11.0.min.js\"></script>\r\n<script>\r\n// Generated by CoffeeScript 1.7.1\r\n(function() {\r\n  var Asteroid, Bullet, Drawable, Ship, asteroids, bindControls, bullets, canvas, canvasHeight, canvasWidth, draw, fpsToInterval, frameRate, gameInit, imageScaleScaleFactor, ship, thrust, updateCoefficient,\r\n    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\r\n    __hasProp = {}.hasOwnProperty,\r\n    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\r\n\r\n  canvas = null;\r\n\r\n  canvasWidth = 0;\r\n\r\n  canvasHeight = 0;\r\n\r\n  imageScaleScaleFactor = .5;\r\n\r\n  frameRate = 20;\r\n\r\n  thrust = 5;\r\n\r\n  updateCoefficient = 1;\r\n\r\n  ship = null;\r\n\r\n  bullets = [];\r\n\r\n  asteroids = [];\r\n\r\n  gameInit = function() {\r\n    canvas = $(\"#gameCanvas\")[0].getContext(\"2d\");\r\n    canvasWidth = $(\"#gameCanvas\").width();\r\n    canvasHeight = $(\"#gameCanvas\").height();\r\n    ship = new Ship();\r\n    asteroids.push(new Asteroid());\r\n    setInterval((function() {\r\n      return asteroids.push(new Asteroid());\r\n    }), 5000);\r\n    setInterval(draw, fpsToInterval(frameRate));\r\n    return bindControls(ship);\r\n  };\r\n\r\n  draw = function() {\r\n    var a, b, _i, _j, _len, _len1, _results;\r\n    canvas.clearRect(0, 0, canvasWidth, canvasHeight);\r\n    ship.draw();\r\n    bullets = bullets.filter(function(b) {\r\n      return b.exists();\r\n    });\r\n    for (_i = 0, _len = bullets.length; _i < _len; _i++) {\r\n      b = bullets[_i];\r\n      b.draw();\r\n    }\r\n    asteroids = asteroids.filter(function(a) {\r\n      return a.exists();\r\n    });\r\n    _results = [];\r\n    for (_j = 0, _len1 = asteroids.length; _j < _len1; _j++) {\r\n      a = asteroids[_j];\r\n      _results.push(a.draw());\r\n    }\r\n    return _results;\r\n  };\r\n\r\n  fpsToInterval = function(fps) {\r\n    return 1000 / fps;\r\n  };\r\n\r\n  bindControls = function(ship) {\r\n    var keyIntervalIds;\r\n    keyIntervalIds = {};\r\n    window.onkeydown = function(evt) {\r\n      var action;\r\n      if (keyIntervalIds[evt.keyCode] != null) {\r\n        return;\r\n      }\r\n      action = (function() {\r\n        switch (evt.keyCode) {\r\n          case 90:\r\n            return ship.rotateLeft;\r\n          case 88:\r\n            return ship.rotateRight;\r\n          case 188:\r\n            return ship.applyThrust;\r\n        }\r\n      })();\r\n      return keyIntervalIds[evt.keyCode] = setInterval(action, 50);\r\n    };\r\n    window.onkeyup = function(evt) {\r\n      clearInterval(keyIntervalIds[evt.keyCode]);\r\n      return keyIntervalIds[evt.keyCode] = null;\r\n    };\r\n    return window.onkeypress = function(evt) {\r\n      if (evt.charCode === 46) {\r\n        return ship.shoot();\r\n      }\r\n    };\r\n  };\r\n\r\n  Drawable = (function() {\r\n    function Drawable() {\r\n      this.closeEnough = __bind(this.closeEnough, this);\r\n      this.checkCollision = __bind(this.checkCollision, this);\r\n      this.loadImage = __bind(this.loadImage, this);\r\n      this.applyForce = __bind(this.applyForce, this);\r\n      this.update = __bind(this.update, this);\r\n      this.draw = __bind(this.draw, this);\r\n    }\r\n\r\n    Drawable.prototype.draw = function() {\r\n      this.update(fpsToInterval(frameRate));\r\n      canvas.save();\r\n      canvas.translate(this.x, this.y);\r\n      canvas.rotate(-this.heading + Math.PI / 2);\r\n      this.render();\r\n      return canvas.restore();\r\n    };\r\n\r\n    Drawable.prototype.update = function(dt) {\r\n      var distance, dx, dy, newX, newY;\r\n      newX = this.x + this.xForce * dt * updateCoefficient;\r\n      newY = this.y + this.yForce * dt * updateCoefficient;\r\n      dx = newX - this.x;\r\n      dy = newY - this.y;\r\n      distance = dx * dx + dy * dy;\r\n      this.x = newX;\r\n      this.y = newY;\r\n      this.x %= canvasWidth;\r\n      this.y %= canvasHeight;\r\n      if (this.x < 0) {\r\n        this.x += canvasWidth;\r\n      }\r\n      if (this.y < 0) {\r\n        this.y += canvasHeight;\r\n      }\r\n      return distance;\r\n    };\r\n\r\n    Drawable.prototype.applyForce = function(magnitude) {\r\n      this.xForce += Math.cos(this.heading) * magnitude;\r\n      return this.yForce -= Math.sin(this.heading) * magnitude;\r\n    };\r\n\r\n    Drawable.prototype.loadImage = function(src, scale) {\r\n      var image;\r\n      if (scale == null) {\r\n        scale = imageScaleScaleFactor;\r\n      }\r\n      image = new Image();\r\n      image.onload = (function(_this) {\r\n        return function() {\r\n          _this.width = image.width * scale;\r\n          _this.height = image.height * scale;\r\n          return _this.drawImage = function() {\r\n            return canvas.drawImage(image, -_this.width / 2, -_this.height / 2, _this.width, _this.height);\r\n          };\r\n        };\r\n      })(this);\r\n      return image.src = src;\r\n    };\r\n\r\n    Drawable.prototype.checkCollision = function(otherItems) {\r\n      var e, _i, _len;\r\n      for (_i = 0, _len = otherItems.length; _i < _len; _i++) {\r\n        e = otherItems[_i];\r\n        if (this.closeEnough(e)) {\r\n          return true;\r\n        }\r\n      }\r\n      return false;\r\n    };\r\n\r\n    Drawable.prototype.closeEnough = function(other, distSquared) {\r\n      var dx, dy;\r\n      if (distSquared == null) {\r\n        distSquared = 600;\r\n      }\r\n      dx = this.x - other.x;\r\n      dy = this.y - other.y;\r\n      return dx * dx + dy * dy < distSquared;\r\n    };\r\n\r\n    return Drawable;\r\n\r\n  })();\r\n\r\n  Ship = (function(_super) {\r\n    var rotateSize;\r\n\r\n    __extends(Ship, _super);\r\n\r\n    function Ship() {\r\n      this.randomMove = __bind(this.randomMove, this);\r\n      this.shoot = __bind(this.shoot, this);\r\n      this.rotateRight = __bind(this.rotateRight, this);\r\n      this.rotateLeft = __bind(this.rotateLeft, this);\r\n      this.applyThrust = __bind(this.applyThrust, this);\r\n      this.render = __bind(this.render, this);\r\n      this.setInitialPosition = __bind(this.setInitialPosition, this);\r\n      var image;\r\n      this.width = 0;\r\n      this.length = 0;\r\n      image = new Image();\r\n      image.onload = (function(_this) {\r\n        return function() {\r\n          _this.width = image.width * imageScaleScaleFactor;\r\n          _this.height = image.height * imageScaleScaleFactor;\r\n          return _this.drawImage = function() {\r\n            return canvas.drawImage(image, -_this.width / 2, -_this.height / 2, _this.width, _this.height);\r\n          };\r\n        };\r\n      })(this);\r\n      image.src = \"spaceship.gif\";\r\n      this.setInitialPosition();\r\n    }\r\n\r\n    Ship.prototype.setInitialPosition = function() {\r\n      this.x = canvasWidth / 2;\r\n      this.y = canvasHeight / 2;\r\n      this.xForce = 0;\r\n      this.yForce = 0;\r\n      return this.heading = Math.PI / 2;\r\n    };\r\n\r\n    Ship.prototype.render = function() {\r\n      return this.drawImage();\r\n    };\r\n\r\n    Ship.prototype.applyThrust = function() {\r\n      return this.applyForce(thrust / 1000);\r\n    };\r\n\r\n    rotateSize = .3;\r\n\r\n    Ship.prototype.rotateLeft = function() {\r\n      return this.heading += rotateSize;\r\n    };\r\n\r\n    Ship.prototype.rotateRight = function() {\r\n      return this.heading -= rotateSize;\r\n    };\r\n\r\n    Ship.prototype.shoot = function() {\r\n      return bullets.push(new Bullet(this));\r\n    };\r\n\r\n    Ship.prototype.randomMove = function() {\r\n      var moves;\r\n      moves = [this.applyThrust, this.rotateLeft, this.rotateRight, this.shoot];\r\n      return moves[Math.randInt(moves.length)]();\r\n    };\r\n\r\n    return Ship;\r\n\r\n  })(Drawable);\r\n\r\n  Asteroid = (function(_super) {\r\n    var image;\r\n\r\n    __extends(Asteroid, _super);\r\n\r\n    image = new Image();\r\n\r\n    image.onload = function() {\r\n      return Asteroid.drawImage = function(scaling) {\r\n        return canvas.drawImage(image, -Asteroid.width / 2, -Asteroid.height / 2, Asteroid.width, Asteroid.height);\r\n      };\r\n    };\r\n\r\n    image.src = \"asteroid-img.png\";\r\n\r\n    function Asteroid(size, parent, first) {\r\n      this.size = size != null ? size : 2;\r\n      if (parent == null) {\r\n        parent = null;\r\n      }\r\n      if (first == null) {\r\n        first = false;\r\n      }\r\n      this.update = __bind(this.update, this);\r\n      this.exists = __bind(this.exists, this);\r\n      this.render = __bind(this.render, this);\r\n      this.width = this.size / 4 * image.width;\r\n      this.height = this.size / 4 * image.height;\r\n      this.length = this.height;\r\n      this.xForce = 0;\r\n      this.yForce = 0;\r\n      this.loadImage(\"asteroid-img.png\", this.size / 4);\r\n      if ((parent != null)) {\r\n        this.x = parent.x;\r\n        this.y = parent.y;\r\n        this.heading = parent.heading + (first ? .2 : -0.2);\r\n      } else {\r\n        this.x = Math.randInt(canvasWidth);\r\n        this.y = Math.randInt(canvasHeight);\r\n        this.heading = Math.random() * Math.PI * 2;\r\n      }\r\n      this.applyForce(.1);\r\n      this.gotHit = false;\r\n    }\r\n\r\n    Asteroid.prototype.render = function() {\r\n      return this.drawImage();\r\n    };\r\n\r\n    Asteroid.prototype.exists = function() {\r\n      return !this.gotHit;\r\n    };\r\n\r\n    Asteroid.prototype.update = function(dt) {\r\n      var b, _i, _len;\r\n      Asteroid.__super__.update.call(this, dt);\r\n      for (_i = 0, _len = bullets.length; _i < _len; _i++) {\r\n        b = bullets[_i];\r\n        if (!(this.closeEnough(b))) {\r\n          continue;\r\n        }\r\n        b.exists(false);\r\n        this.gotHit = true;\r\n      }\r\n      if (this.gotHit && this.size > 1) {\r\n        asteroids.push(new Asteroid(1, this, false));\r\n        return asteroids.push(new Asteroid(1, this, true));\r\n      }\r\n    };\r\n\r\n    return Asteroid;\r\n\r\n  })(Drawable);\r\n\r\n  Bullet = (function(_super) {\r\n    __extends(Bullet, _super);\r\n\r\n    function Bullet(ship) {\r\n      this.exists = __bind(this.exists, this);\r\n      this.update = __bind(this.update, this);\r\n      this.render = __bind(this.render, this);\r\n      this.x = ship.x;\r\n      this.y = ship.y;\r\n      this.xForce = ship.xForce;\r\n      this.yForce = ship.yForce;\r\n      this.heading = ship.heading;\r\n      this.distanceRemaining = 50 * 60;\r\n      this.length = 25;\r\n      this.width = 10;\r\n      this.applyForce(thrust / 20);\r\n    }\r\n\r\n    Bullet.prototype.render = function() {\r\n      canvas.fillStyle = \"#FF0000\";\r\n      return canvas.fillRect(-this.width / 2, -this.length - 10, this.width, this.length);\r\n    };\r\n\r\n    Bullet.prototype.update = function(dt) {\r\n      return this.distanceRemaining -= Bullet.__super__.update.apply(this, arguments);\r\n    };\r\n\r\n    Bullet.prototype.exists = function(val) {\r\n      if (val == null) {\r\n        val = true;\r\n      }\r\n      if (!val) {\r\n        this.distanceRemaining = -1;\r\n      }\r\n      return this.distanceRemaining > 0;\r\n    };\r\n\r\n    return Bullet;\r\n\r\n  })(Drawable);\r\n\r\n  Math.randInt = function(a, b) {\r\n    var range, _ref;\r\n    if (b == null) {\r\n      b = null;\r\n    }\r\n    if (b == null) {\r\n      _ref = [0, a], a = _ref[0], b = _ref[1];\r\n    }\r\n    range = b - a;\r\n    return a + Math.floor(Math.random() * range);\r\n  };\r\n\r\n  $(function() {\r\n    return gameInit();\r\n  });\r\n\r\n}).call(this);\r\n\r\n//# sourceMappingURL=asteroids.map\r\n\r\n</script>\r\n<canvas id=\"gameCanvas\" width=\"640\" height=\"480\" style=\"border: 1px solid black\"></canvas>\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}